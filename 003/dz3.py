#Задание будет состять из двух частей: простое и сложное. Можно выполнить оба, можно выбрать одно.

#*Выполнение:
#У кого возникают проблемы на Windows с консолью, можно использовать
#оналайн среду: https://repl.it/languages/python3

#*Простой вариант:
#В простом варианте будем решать короткие задачи на закрепление материала.

#**Задачи на обработку ошибок:
#1.Пользователь вводит число, если оно четное - выбрасываем исключение ValueError, если оно меньше 0 - TypeError, если оно больше 10 - IndexError. Обрабатываем ошибку, говорим пользователю, в чем его ошибка

def funct(x):
    xx = 1
    if x > 10:
        try:
            raise IndexError
        except IndexError as log1:
            xx = log1
            print('chislo bolshe 10', log1)
    elif not x % 2:
        try:
            raise ValueError
        except ValueError as log2:
            xx = log2
            print('chislo chetnoe', log2)
    else:
        pass
    return print(xx)

#2. Создайте список произвольной длины. Пользователь должен ввести индекс объекта, который хочет посмотреть. Если все хорошо - пишите объект в консоль. Если нет - обработайте возмозможные ошибки и скажите ему, что не так

def spisok(*numbers):
    x = 1
    try:
        print('kakoe chslo posmotret?', input(int(s))
        print(numbers[s])
    return print(x)


#**Задачи на закрепление функций:
#1.Написать функцию, которая принимает на вход два аргумента. Если аргументы больше нуля, возвращаем их сумму. Если оба меньше - разность. Если знаки разные - возвращаем 0

def arguments(a, b):
	ress = 1
	if a > 0 and b > 0:
		ress = a + b
	elif a < 0 and b < 0:
		ress = a + b
	elif a < 0 and b > 0:
		ress = 0
	elif a > 0 and b < 0:
		ress = 0
	return print(ress)

#2.Написать функцию, которая принимает 3 аргумента - числа, найти среди них два максимальных, вывести в консоль

def maxi2(a, b, c):
	if a > b > c:
		print(a, b)
	elif a > c > b:
		print(a, c)
	elif b > a > c:
		print(b, a)
	elif b > c > a:
		print(b, c)
	elif c > a > b:
		print(c, a)
	elif c > b > a:
		print(c, b)
    return

#3.Написать функцию, которая принимает два аргумента. Первый - список чисел, второй - булевый флаг. Если флаг действителен - возвращаем новый список с нечетными числами из входного списка, если флаг отрицателен - возвращаем новый список с четными числами из входного списка

def chetnechet(*numbers, a = bool()):
    chet =[]
    nechet = []
    for z in numbers:
        if z % 2:
            chet.append(z)
        else:
            nechet.append(z)
    if a == True:
        print(nechet)
    else:
        print(chet)
    return

chetnechet(21,4562,2456,2456,2456234123,1,1,33,5,7,2,123,6,7,22,1,33, a = True)

#**Задачи на закрепление типов аргументов:
#1.Написать функцию, которая принимает любое количество аргументов чисел. Среди них она находит максимальное и минимальное. И возвращает оба

def minmax(*numbers):
	print('minimalnoe', min(numbers))
    print('maximalnoe',max(numbers))
    return

#2.Написать функцию, которая принимает два аргумента: строка и булевый флаг case по-умолчанию равный True. Если флаг действителен: возвращаем новую строку, где каждый символ входной приведен к верхнему регистру, иначе - к нижнему

def verxniz(a = 'asd', case = True):
    if case == True:
        print(a.upper())
    else:
        print(a.lower())
    return

verxniz('asdasdasFsdqqSdw', False)

#3.Написать функцию, которая принимает любое количество позиционных аргументов - строк и один парматер по-умолчанию glue, который равен ':'. Соединить все строки таким образом, чтобы в результат попали все строки, длинее 3 символов. Для соединения между любых двух строк вставлять glue

def stringssum(*s, glue = ':'):
    strokaitog = ''
    for l in s:
        if len(l) > 3:
            strokaitog += l + glue
        else:
            pass
    print(strokaitog)
    
stringssum('a','sss','asdasd','rfffff',glue = '-')






#**Материалы:
#1. Что такое ошибка? https://docs.python.org/3.6/tutorial/errors.html
#2. Какие бывают ошибки? https://docs.python.org/3/library/exceptions.html
#3. В чем разница между except и except Exception? https://stackoverflow.com/questions/18982610/difference-between-except-and-except-exception-as-e-in-python
#4. Что такое функция? https://www.tutorialspoint.com/python/python_functions.htm
#5. Что значит - вызвать функцию? https://stackoverflow.com/questions/19130958/what-does-it-mean-to-call-a-function-in-python
#6. Что такое *args и **kwargs: https://lancelote.gitbooks.io/intermediate-python/content/book/args_and_kwargs.html

#*Сложный вариант:
#Задача: необходимо реализовать игру в пятнашки.
#Задача про пятнашки действительно непростая, но очень интересная.

#**Требования:
#1. Игра пятнашки: https://ru.wikipedia.org/wiki/%D0%98%D0%B3%D1%80%D0%B0_%D0%B2_15
#2. Поле состоит из клеток от 1 до 15 и пустой клетки
#3. Управление ведется кнопками "wasd", двигается пустая клетка
#4. В начале игры поле перемешено в случайном порядке
#5. Пользователь не должен соверашть непозволительные шаги. Например, из-за ограничений рамки поля. Ему должно показываться сообщение о том, что он пытается совершить непозволительный ход
#6. Пользователю дожно быть видно поле. Оно представляет собой матрицу 4 на 4. Пустую клекту обозначаем как x. При каждом действии пользователя поле рисуется еще раз - ниже в консоли
#7. Игра заканчивается, когда все клетки стоят по-порядку, а пустая клетка - последняя. В конце игры пользователю показывается, сколько ходов он совершил
#8. Выход из игры происходит при помощи KeyboardInterrupt. Исключение должно быть обработано. Пользователю должна быть выведена фраза "shutting down"

#**Дополнительно:
#1. Обратите внимание, что не любое поле оставляет возможность закончить игру, необходимо придумать корректный алгоритм генерации взамен простого перемешивания
#2. Тесты, которые приложены к работе должны проходить
#3. Вам необходимо посмотреть, как работают самописные тесты, которые приложены к работе

#**Прохождение тестов:
#1. Создаем папку game_code
#2. В ней создаем файл game.py
#3. Рядом должен лежать мой файл tests.py
#4. Вызываем python3 tests.py

stroka1 = [a1, a2, a3, a4]
stroka2 = [b1, b2, b3, b4]
stroka3 = [c1, c2, c3, c4]
stroka4 = [d1, d2, d3, d4]

a1 = randint(1, 15)
a2 = randint(1, 15) and != a1
a3 = randint(1, 15) and != a1 and != a2